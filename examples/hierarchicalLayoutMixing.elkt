/*******************************************************************************
 * Copyright (c) 2020 Kiel University and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/

/*
// elkex:category
Hierarchy

// elkex:label
Mixed Algorithms

// elkex:doc
The example illustrates how different layout algorithms 
can be configured for different hierarchical nodes 
by setting the `algorithm` option for the individual nodes.

It illustrates two further effects. 
First, while the `hierarchyHandling: INCLUDE_CHILDREN` option
(which is only available for `elk.layered`) usually results in 
the whole graph being passed to `elk.layered`, 
in this case the subgraph starting at `insideOtherLayout` is excluded from 
this behavior. It is laid out separately. 
The same behavior can be achieved by explicitly setting `hierarchyHandling: SEPARATE_CHILDREN`,
which is, for instance, necessary if different layout directions 
are required - the second effect illustrated here.
See the options applied to `insideOtherDirection`.
*/

// elkex:graph
algorithm: elk.layered
hierarchyHandling: INCLUDE_CHILDREN

node source

node outside {
    node inside {
        node n1 
        node n2
        edge n1 -> n2
    }

    node insideOtherLayout {
        algorithm: elk.stress
        desiredEdgeLength: 50
        elk.padding: "[top=10,left=10,bottom=10,right=10]"
        node n3
        node n4
        node n5
        edge n3 -> n4
        edge n4 -> n5
        edge n5 -> n3
    }

    node insideOtherDirection {
        // Note that to activate the different direction, 
        // hierarchyHandling has to be switched off. 
        // This also deactivates hierarchical edges for any internals
        elk.direction: DOWN
        hierarchyHandling: SEPARATE_CHILDREN
        node n6
        node n7
        edge n6 -> n7
    }
}

edge source -> outside.inside.n1